{
  "author": {
    "name": "Gary Dusbabek",
    "email": "gdusbabek@gmail.com"
  },
  "contributors": [
    {
      "name": "Eric Evans",
      "email": "eevans@acunu.com"
    },
    {
      "name": "Gary Dusbabek",
      "email": "gdusbabek@gmail.com"
    },
    {
      "name": "TomaÅ¾ Muraus",
      "email": "tomaz@tomaz.me"
    },
    {
      "name": "Patrick Negri",
      "email": "patrick@iugu.com.br"
    },
    {
      "name": "Christoph Tavan",
      "email": "dev@tavan.de"
    },
    {
      "name": "Allan Carroll",
      "email": "allanca@gmail.com"
    }
  ],
  "name": "cassandra-client",
  "description": "Node.js CQL driver for Apache Cassandra",
  "version": "0.14.5",
  "homepage": "http://code.google.com/a/apache-extras.org/p/cassandra-node/",
  "repository": {
    "type": "git",
    "url": "https://code.google.com/a/apache-extras.org/p/cassandra-node/"
  },
  "main": "node-cassandra-client",
  "directories": {
    "lib": "lib"
  },
  "scripts": {
    "test": "./scripts/test.sh",
    "lint": "./scripts/lint.sh"
  },
  "engines": {
    "node": ">= 0.6.7"
  },
  "dependencies": {
    "async": ">= 0.1.12",
    "thrift": ">= 0.7.0",
    "whiskey": ">= 0.6.11",
    "node-uuid": ">= 1.3.3"
  },
  "devDependencies": {
    "jshint": "0.9.1"
  },
  "licenses": [
    {
      "type": "Apache",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  ],
  "readme": "# node-cassandra-client\n\nnode-cassandra-client is a [Node.js](http://nodejs.org) CQL driver for [Apache Cassandra](http://cassandra.apache.org) 0.8 and later.\n\nCQL is a query language for Apache Cassandra.  You use it in much the same way you would use SQL for a relational database.\nThe Cassandra [documentation](http://www.datastax.com/docs/1.0/references/cql/index) can help you learn the syntax.\n\n## node-cassandra-client and Apache Cassandra 1.2.x\n\nSince `0.14.1`, the client supports Apache Cassandra 1.2.x in CQL 2\ncompatibility mode.\n\nBy default Cassandra 1.2.x uses CQL 3 so you need to turn the CQL 2\ncompatibility mode on by passing `'cql_version': '2.0.0'` attribute to\n`Connection` / `PooledConnection` constructor in the options object.\n\nExplicitly setting CQL version on a connection is only supported from\nApache Cassandra 1.1 and above so you should only set it if you are\nusing version 1.1 or above.\n\nFor example:\n\n```javascript\nvar conn = new Connection({'host': host, 'port': port, 'keyspace': 'Keyspace1', 'cql_version': '2.0.0'});\nvar pool = new PooledConnection({'hosts': hosts, 'keyspace': 'Keyspace1', 'cql_version': '2.0.0'});\n```\n\n### Creating column families using cqlsh\n\nIf you use `cqlsh` which ships with Cassandra 1.2.x or a newer version of\n`cqlsh` which defaults to CQL 3 you need to pass `-2` argument to it, otherwise\nthe client won't be able to read column family definitions (#67).\n\nFor example:\n\n```bash\ncqlsh -2 localhost 9160 < my_file.cql\n```\n\n## Installation\n\n    $ npm install cassandra-client\n\n## Build status\n\n[![Build Status](https://secure.travis-ci.org/racker/node-cassandra-client.png)](http://travis-ci.org/racker/node-cassandra-client)\n\n## Running Tests and Lint\n\n```bash\nnpm run-script test\nnpm run-script lint\n```\n\n## License\n\nnode-cassandra-client is distributed under the [Apache license](http://www.apache.org/licenses/LICENSE-2.0.html).\n\n[lib/bigint.js](https://github.com/racker/node-cassandra-client/blob/master/lib/bigint.js) is [borrowed](https://github.com/joyent/node/blob/master/deps/v8/benchmarks/crypto.js)\nfrom the Node.js source (which comes from the [V8](http://code.google.com/p/v8/) source).\n\n\n## Using It\n\n### Access the System keyspace\n    var System = require('cassandra-client').System;\n    var sys = new System('127.0.0.1:9160');\n\n    sys.describeKeyspace('Keyspace1', function(err, ksDef) {\n      if (err) {\n        // this code path is executed if the key space does not exist.\n      } else {\n        // assume ksDef contains a full description of the keyspace (uses the thrift structure).\n      }\n    });\n\n### Create a keyspace\n    sys.addKeyspace(ksDef, function(err) {\n      if (err) {\n        // there was a problem creating the keyspace.\n      } else {\n        // keyspace was successfully created.\n      }\n    });\n\n### Updating\nThis example assumes you have strings for keys, column names and values:\n\n    var Connection = require('cassandra-client').Connection;\n    var con = new Connection({host:'cassandra-host', port:9160, keyspace:'Keyspace1', user:'user', pass:'password'});\n    con.execute('UPDATE Standard1 SET ?=? WHERE key=?', ['cola', 'valuea', 'key0'], function(err) {\n        if (err) {\n            // handle error\n        } else {\n            // handle success.\n        }\n  });\n\nThe `Connection` constructor accepts the following properties:\n\n    host:        cassandra host\n    port:        cassandra port\n    keyspace:    cassandra keyspace\n    user:        [optional] cassandra user\n    pass:        [optional] cassandra password\n    use_bigints: [optional] boolean. toggles whether or not BigInteger or Number instances are in results.\n    timeout:     [optional] number. Connection timeout. Defaults to 4000ms.\n    log_time:    [optional] boolean. Log execution time for all the queries.\n\n### Getting data\n\n**NOTE:** You'll only get ordered and meaningful results if you are using an order-preserving partitioner.\nAssume the updates have happened previously.\n\n  con.execute('SELECT ? FROM Standard1 WHERE key >= ? and key <= ?', ['cola', 'key0', 'key1'], function (err, rows) {\n    if (err) {\n      // handle error\n    } else {\n      console.log(rows.rowCount());\n      console.log(rows[0]);\n                        assert.strictEqual(rows[0].colCount(), 1);\n                        assert.ok(rows[0].colHash['cola']);\n                        assert.ok(rows[0].cols[0].name === 'cola');\n                        assert.ok(rows[0].cols[0].value === 'valuea');\n    }\n  });\n\n### Pooled Connections\n    // Creating a new connection pool.\n    var PooledConnection = require('cassandra-client').PooledConnection;\n    var hosts = ['host1:9160', 'host2:9170', 'host3', 'host4'];\n    var connection_pool = new PooledConnection({'hosts': hosts, 'keyspace': 'Keyspace1'});\n\nPooledConnection() accepts an objects with these slots:\n\n         hosts : String list in host:port format. Port is optional (defaults to 9160).\n      keyspace : Name of keyspace to use.\n          user : User for authentication (optional).\n          pass : Password for authentication (optional).\n       maxSize : Maximum number of connection to pool (optional).\n    idleMillis : Idle connection timeout in milliseconds (optional).\n    use_bigints: boolean indicating whether or not to use BigInteger or Number in numerical results.\n    timeout:   : [optional] number. Connection timeout. Defaults to 4000ms.\n    log_time   : [optional] boolean. Log execution time for all the queries.\n                 Timing is logged to 'node-cassandra-client.driver.timing' route. Defaults to false.\n\nQueries are performed using the `execute()` method in the same manner as `Connection`,\n(see above).  For example:\n\n    // Writing\n    connection_pool.execute('UPDATE Standard1 SET ?=? WHERE KEY=?', ['A', '1', 'K'],\n      function(err) {\n        if (err) console.log(\"failure\");\n        else console.log(\"success\");\n      }\n    );\n\n    // Reading\n    connection_pool.execute('SELECT ? FROM Standard1 WHERE KEY=?', ['A', 'K'],\n      function(err, row) {\n        if (err) console.log(\"lookup failed\");\n        else console.log(\"got result \" + row.cols[0].value);\n      }\n    );\n\nWhen you are finished with a `PooledConnection` instance, call `shutdown(callback)`.\nShutting down the pool prevents further work from being enqueued, and closes all\nopen connections after pending requests are complete.\n\n    // Shutting down a pool\n    connection_pool.shutdown(function() { console.log(\"connection pool shutdown\"); });\n\n### Logging\n\nInstances of `Connection()` and `PooledConnection()` are `EventEmitter`'s and emit `log` events:\n\n    var Connection = require('cassandra-client').Connection;\n    var con = new Connection({host:'cassandra-host', port:9160, keyspace:'Keyspace1', user:'user', pass:'password'});\n    con.on('log', function(level, message, obj) {\n      console.log('log event: %s -- %j', level, message);\n    });\n\nThe `level` being passed to the listener can be one of `debug`, `info`, `warn`, `error`, `timing` and `cql`. The `message` is a string and `obj` is an object that provides more detailed information.\n\n## Regenerating Thrift Definition Files\n\nTo regenerate Thrift definition files you need to have thrift compiler\ninstalled. You can find information on how to do that on the\n[Thrift website](http://thrift.apache.org/docs/install/).\n\n```bash\ngit clone git://github.com/apache/cassandra.git\ncd cassandra/interface\nthrift --gen js:node cassandra.thrift\n```\n\n## Things you should know about\n\n### Numbers\n\nThe Javascript Number type doesn't match up well with the java longs and integers stored in Cassandra.\nTherefore all numbers returned in queries are BigIntegers.  This means that you need to be careful when you\ndo updates.  If you're worried about losing precision, specify your numbers as strings and use the BigInteger library.\n\n### Decoding\n\nnode-cassandra-client supports Cassandra `BytesType`, `IntegerType`, `LongTime` and `TimeUUIDType` out of the box.\nWhen dealing with numbers, the values you retreive out of rows will all be `BigInteger`s (be wary of losing precision\nif your numbers are bigger than 2^53--you know, like a timestamp).\n\n`BigInteger` supports many operations like add, subtract, multiply, etc., and a few others that may come in handy: shift, square, abs, etc.  Check the source if you'd like to know more.\n\nWe technically have a [UUID type](https://github.com/racker/node-cassandra-client/blob/master/lib/uuid.js), but have not had the need to flesh it out yet.  If you find the need to expose more parts of the UUID (timestamp, node, clock sequence, etc.), or would like to implement some operations, patches are welcome.\n\n### Todo\n\n* Full BigInteger documentation.\n",
  "readmeFilename": "README.md",
  "_id": "cassandra-client@0.14.5",
  "dist": {
    "shasum": "010cfdf3f071489fbb9f502d2f3a3e22f5c76f96"
  },
  "_from": "cassandra-client@",
  "_resolved": "https://registry.npmjs.org/cassandra-client/-/cassandra-client-0.14.5.tgz"
}
